[1mdiff --git a/client.http b/client.http[m
[1mindex 4a93823..113e8dd 100755[m
[1m--- a/client.http[m
[1m+++ b/client.http[m
[36m@@ -208,5 +208,5 @@[m [mAuthorization: Bearer {{authToken}}[m
 ###[m
 [m
 # @name fetch_Variants[m
[31m-GET {{baseurl}}/medicines-variants?page=1[m
[32m+[m[32mGET {{baseurl}}/medicines-variants?page=2&query=[m
 Authorization: Bearer {{authToken}}[m
[1mdiff --git a/package-lock.json b/package-lock.json[m
[1mindex 89f385d..530dc4c 100755[m
[1m--- a/package-lock.json[m
[1m+++ b/package-lock.json[m
[36m@@ -16,6 +16,7 @@[m
         "@nestjs/jwt": "^10.2.0",[m
         "@nestjs/passport": "^10.0.3",[m
         "@nestjs/platform-express": "^10.0.0",[m
[32m+[m[32m        "@nestjs/swagger": "^8.0.7",[m
         "@prisma/client": "^5.21.1",[m
         "bcryptjs": "^2.4.3",[m
         "class-transformer": "^0.5.1",[m
[36m@@ -36,7 +37,7 @@[m
         "@swc/core": "^1.7.36",[m
         "@types/bcryptjs": "^2.4.6",[m
         "@types/express": "^5.0.0",[m
[31m-        "@types/node": "^20.3.1",[m
[32m+[m[32m        "@types/node": "^20.17.8",[m
         "@types/passport-jwt": "^4.0.1",[m
         "@types/supertest": "^6.0.0",[m
         "@typescript-eslint/eslint-plugin": "^8.0.0",[m
[36m@@ -52,9 +53,9 @@[m
         "source-map-support": "^0.5.21",[m
         "supertest": "^7.0.0",[m
         "ts-loader": "^9.4.3",[m
[31m-        "ts-node": "^10.9.1",[m
[32m+[m[32m        "ts-node": "^10.9.2",[m
         "tsconfig-paths": "^4.2.0",[m
[31m-        "typescript": "^5.1.3",[m
[32m+[m[32m        "typescript": "^5.7.2",[m
         "unplugin-swc": "^1.5.1",[m
         "vite-tsconfig-paths": "^5.0.1",[m
         "vitest": "^2.1.3"[m
[36m@@ -1523,6 +1524,12 @@[m
         "node": ">=8"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/@microsoft/tsdoc": {[m
[32m+[m[32m      "version": "0.15.1",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@microsoft/tsdoc/-/tsdoc-0.15.1.tgz",[m
[32m+[m[32m      "integrity": "sha512-4aErSrCR/On/e5G2hDP0wjooqDdauzEbIq8hIkIe5pXV0rtWJZvdCEKL0ykZxex+IxIwBp0eGeV48hQN07dXtw==",[m
[32m+[m[32m      "license": "MIT"[m
[32m+[m[32m    },[m
     "node_modules/@nestjs/cli": {[m
       "version": "10.4.5",[m
       "resolved": "https://registry.npmjs.org/@nestjs/cli/-/cli-10.4.5.tgz",[m
[36m@@ -1749,6 +1756,26 @@[m
         "@nestjs/common": "^8.0.0 || ^9.0.0 || ^10.0.0"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/@nestjs/mapped-types": {[m
[32m+[m[32m      "version": "2.0.6",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@nestjs/mapped-types/-/mapped-types-2.0.6.tgz",[m
[32m+[m[32m      "integrity": "sha512-84ze+CPfp1OWdpRi1/lOu59hOhTz38eVzJvRKrg9ykRFwDz+XleKfMsG0gUqNZYFa6v53XYzeD+xItt8uDW7NQ==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "@nestjs/common": "^8.0.0 || ^9.0.0 || ^10.0.0",[m
[32m+[m[32m        "class-transformer": "^0.4.0 || ^0.5.0",[m
[32m+[m[32m        "class-validator": "^0.13.0 || ^0.14.0",[m
[32m+[m[32m        "reflect-metadata": "^0.1.12 || ^0.2.0"[m
[32m+[m[32m      },[m
[32m+[m[32m      "peerDependenciesMeta": {[m
[32m+[m[32m        "class-transformer": {[m
[32m+[m[32m          "optional": true[m
[32m+[m[32m        },[m
[32m+[m[32m        "class-validator": {[m
[32m+[m[32m          "optional": true[m
[32m+[m[32m        }[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/@nestjs/passport": {[m
       "version": "10.0.3",[m
       "resolved": "https://registry.npmjs.org/@nestjs/passport/-/passport-10.0.3.tgz",[m
[36m@@ -1865,6 +1892,39 @@[m
       "dev": true,[m
       "license": "MIT"[m
     },[m
[32m+[m[32m    "node_modules/@nestjs/swagger": {[m
[32m+[m[32m      "version": "8.0.7",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@nestjs/swagger/-/swagger-8.0.7.tgz",[m
[32m+[m[32m      "integrity": "sha512-zaTMCEZ/CxX7QYF110nTqJsn7eCXp4VI9kv7+AdUcIlBmhhgJpggBw2Mx2p6xVjyz1EoWXGfxxWKnxEyaQwFlg==",[m
[32m+[m[32m      "license": "MIT",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "@microsoft/tsdoc": "^0.15.0",[m
[32m+[m[32m        "@nestjs/mapped-types": "2.0.6",[m
[32m+[m[32m        "js-yaml": "4.1.0",[m
[32m+[m[32m        "lodash": "4.17.21",[m
[32m+[m[32m        "path-to-regexp": "3.3.0",[m
[32m+[m[32m        "swagger-ui-dist": "5.18.2"[m
[32m+[m[32m      },[m
[32m+[m[32m      "peerDependencies": {[m
[32m+[m[32m        "@fastify/static": "^6.0.0 || ^7.0.0",[m
[32m+[m[32m        "@nestjs/common": "^9.0.0 || ^10.0.0",[m
[32m+[m[32m        "@nestjs/core": "^9.0.0 || ^10.0.0",[m
[32m+[m[32m        "class-transformer": "*",[m
[32m+[m[32m        "class-validator": "*",[m
[32m+[m[32m        "reflect-metadata": "^0.1.12 || ^0.2.0"[m
[32m+[m[32m      },[m
[32m+[m[32m      "peerDependenciesMeta": {[m
[32m+[m[32m        "@fastify/static": {[m
[32m+[m[32m          "optional": true[m
[32m+[m[32m        },[m
[32m+[m[32m        "class-transformer": {[m
[32m+[m[32m          "optional": true[m
[32m+[m[32m        },[m
[32m+[m[32m        "class-validator": {[m
[32m+[m[32m          "optional": true[m
[32m+[m[32m        }[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/@nestjs/testing": {[m
       "version": "10.4.5",[m
       "resolved": "https://registry.npmjs.org/@nestjs/testing/-/testing-10.4.5.tgz",[m
[36m@@ -2505,6 +2565,13 @@[m
         "win32"[m
       ][m
     },[m
[32m+[m[32m    "node_modules/@scarf/scarf": {[m
[32m+[m[32m      "version": "1.4.0",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@scarf/scarf/-/scarf-1.4.0.tgz",[m
[32m+[m[32m      "integrity": "sha512-xxeapPiUXdZAE3che6f3xogoJPeZgig6omHEy1rIY5WVsB3H2BHNnZH+gHG6x91SCWyQCzWGsuL2Hh3ClO5/qQ==",[m
[32m+[m[32m      "hasInstallScript": true,[m
[32m+[m[32m      "license": "Apache-2.0"[m
[32m+[m[32m    },[m
     "node_modules/@sinclair/typebox": {[m
       "version": "0.27.8",[m
       "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",[m
[36m@@ -2978,9 +3045,9 @@[m
       "license": "MIT"[m
     },[m
     "node_modules/@types/node": {[m
[31m-      "version": "20.16.11",[m
[31m-      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.16.11.tgz",[m
[31m-      "integrity": "sha512-y+cTCACu92FyA5fgQSAI8A1H429g7aSK2HsO7K4XYUWc4dY5IUz55JSDIYT6/VsOLfGy8vmvQYC2hfb0iF16Uw==",[m
[32m+[m[32m      "version": "20.17.8",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.17.8.tgz",[m
[32m+[m[32m      "integrity": "sha512-ahz2g6/oqbKalW9sPv6L2iRbhLnojxjYWspAqhjvqSWBgGebEJT5GvRmk0QXPj3sbC6rU0GTQjPLQkmR8CObvA==",[m
       "license": "MIT",[m
       "dependencies": {[m
         "undici-types": "~6.19.2"[m
[36m@@ -3918,7 +3985,6 @@[m
       "version": "2.0.1",[m
       "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",[m
       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",[m
[31m-      "dev": true,[m
       "license": "Python-2.0"[m
     },[m
     "node_modules/array-buffer-byte-length": {[m
[36m@@ -8924,7 +8990,6 @@[m
       "version": "4.1.0",[m
       "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",[m
       "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",[m
[31m-      "dev": true,[m
       "license": "MIT",[m
       "dependencies": {[m
         "argparse": "^2.0.1"[m
[36m@@ -12050,6 +12115,15 @@[m
         "semver": "bin/semver.js"[m
       }[m
     },[m
[32m+[m[32m    "node_modules/swagger-ui-dist": {[m
[32m+[m[32m      "version": "5.18.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.18.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-J+y4mCw/zXh1FOj5wGJvnAajq6XgHOyywsa9yITmwxIlJbMqITq3gYRZHaeqLVH/eV/HOPphE6NjF+nbSNC5Zw==",[m
[32m+[m[32m      "license": "Apache-2.0",[m
[32m+[m[32m      "dependencies": {[m
[32m+[m[32m        "@scarf/scarf": "=1.4.0"[m
[32m+[m[32m      }[m
[32m+[m[32m    },[m
     "node_modules/symbol-observable": {[m
       "version": "4.0.0",[m
       "resolved": "https://registry.npmjs.org/symbol-observable/-/symbol-observable-4.0.0.tgz",[m
[36m@@ -12766,9 +12840,9 @@[m
       "license": "MIT"[m
     },[m
     "node_modules/typescript": {[m
[31m-      "version": "5.6.3",[m
[31m-      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.6.3.tgz",[m
[31m-      "integrity": "sha512-hjcS1mhfuyi4WW8IWtjP7brDrG2cuDZukyrYrSauoXGNgx0S7zceP07adYkJycEr56BOUTNPzbInooiN3fn1qw==",[m
[32m+[m[32m      "version": "5.7.2",[m
[32m+[m[32m      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.2.tgz",[m
[32m+[m[32m      "integrity": "sha512-i5t66RHxDvVN40HfDd1PsEThGNnlMCMT3jMUuoh9/0TaqWevNontacunWyN02LA9/fIbEWlcHZcgTKb9QoaLfg==",[m
       "license": "Apache-2.0",[m
       "bin": {[m
         "tsc": "bin/tsc",[m
[1mdiff --git a/package.json b/package.json[m
[1mindex 53171fb..52d418b 100755[m
[1m--- a/package.json[m
[1m+++ b/package.json[m
[36m@@ -22,6 +22,9 @@[m
     "test:e2e": "vitest run --config ./vitest.config.e2e.mts",[m
     "test:e2e:watch": "vitest --config ./vitest.config.e2e.mts"[m
   },[m
[32m+[m[32m  "prisma": {[m
[32m+[m[32m    "seed": "ts-node prisma/seed.ts"[m
[32m+[m[32m  },[m
   "dependencies": {[m
     "@js-brasil/fakerbr": "^0.0.2",[m
     "@nestjs/common": "^10.0.0",[m
[36m@@ -30,6 +33,7 @@[m
     "@nestjs/jwt": "^10.2.0",[m
     "@nestjs/passport": "^10.0.3",[m
     "@nestjs/platform-express": "^10.0.0",[m
[32m+[m[32m    "@nestjs/swagger": "^8.0.7",[m
     "@prisma/client": "^5.21.1",[m
     "bcryptjs": "^2.4.3",[m
     "class-transformer": "^0.5.1",[m
[36m@@ -50,7 +54,7 @@[m
     "@swc/core": "^1.7.36",[m
     "@types/bcryptjs": "^2.4.6",[m
     "@types/express": "^5.0.0",[m
[31m-    "@types/node": "^20.3.1",[m
[32m+[m[32m    "@types/node": "^20.17.8",[m
     "@types/passport-jwt": "^4.0.1",[m
     "@types/supertest": "^6.0.0",[m
     "@typescript-eslint/eslint-plugin": "^8.0.0",[m
[36m@@ -66,9 +70,9 @@[m
     "source-map-support": "^0.5.21",[m
     "supertest": "^7.0.0",[m
     "ts-loader": "^9.4.3",[m
[31m-    "ts-node": "^10.9.1",[m
[32m+[m[32m    "ts-node": "^10.9.2",[m
     "tsconfig-paths": "^4.2.0",[m
[31m-    "typescript": "^5.1.3",[m
[32m+[m[32m    "typescript": "^5.7.2",[m
     "unplugin-swc": "^1.5.1",[m
     "vite-tsconfig-paths": "^5.0.1",[m
     "vitest": "^2.1.3"[m
[1mdiff --git a/prisma/schema.prisma b/prisma/schema.prisma[m
[1mindex 69b27ac..910b18b 100755[m
[1m--- a/prisma/schema.prisma[m
[1m+++ b/prisma/schema.prisma[m
[36m@@ -97,7 +97,6 @@[m [mmodel TherapeuticClass {[m
   name      String[m
   createdAt DateTime @default(now()) @map("created_at")[m
 [m
[31m-  medicines                Medicine[]                 @relation("TherapeuticClassesOnMedicines")[m
   MedicineTherapeuticClass MedicineTherapeuticClass[][m
 [m
   @@map("therapeutic_classes")[m
[36m@@ -110,7 +109,6 @@[m [mmodel Medicine {[m
   createdAt   DateTime  @default(now())[m
   updatedAt   DateTime? @updatedAt[m
 [m
[31m-  therapeuticClasses       TherapeuticClass[]         @relation("TherapeuticClassesOnMedicines")[m
   medicineVariants         MedicineVariant[][m
   MedicineTherapeuticClass MedicineTherapeuticClass[][m
 [m
[1mdiff --git a/prisma/seed.ts b/prisma/seed.ts[m
[1mindex 6fef68b..7867426 100644[m
[1m--- a/prisma/seed.ts[m
[1m+++ b/prisma/seed.ts[m
[36m@@ -231,7 +231,6 @@[m [masync function main() {[m
   const therapeuticClasse04 = await prisma.therapeuticClass.create({[m
     data: {[m
       name: 'Antifúngicos',[m
[31m-[m
     },[m
   })[m
 [m
[1mdiff --git a/src/domain/pharma/application/repositories/medicine-variant-repository.ts b/src/domain/pharma/application/repositories/medicine-variant-repository.ts[m
[1mindex b1bccb3..26dbf21 100644[m
[1m--- a/src/domain/pharma/application/repositories/medicine-variant-repository.ts[m
[1m+++ b/src/domain/pharma/application/repositories/medicine-variant-repository.ts[m
[36m@@ -1,10 +1,18 @@[m
 import { PaginationParams } from '@/core/repositories/pagination-params'[m
 import { MedicineVariant } from '../../enterprise/entities/medicine-variant'[m
 import { MedicineVariantWithMedicine } from '../../enterprise/entities/value-objects/medicine-variant-with-medicine'[m
[32m+[m[32mimport type { Meta } from '@/core/repositories/meta'[m
 [m
 export abstract class MedicinesVariantsRepository {[m
   abstract create(medicinevariant: MedicineVariant): Promise<void>[m
   abstract medicineVariantExists(medicinevariant: MedicineVariant): Promise<MedicineVariant | null>[m
   abstract findById(id:string): Promise<MedicineVariant | null>[m
[31m-  abstract findManyByMedicineIdWithMedicine(medicineId: string, params: PaginationParams): Promise<MedicineVariantWithMedicine[]>[m
[32m+[m[32m  abstract findManyByMedicineIdWithMedicine([m
[32m+[m[32m    medicineId: string,[m
[32m+[m[32m    params: PaginationParams,[m
[32m+[m[32m    content?: string[m
[32m+[m[32m  ): Promise<{[m
[32m+[m[32m    medicinesVariants: MedicineVariantWithMedicine[],[m
[32m+[m[32m    meta: Meta[m
[32m+[m[32m  }>[m
 }[m
[1mdiff --git a/src/domain/pharma/application/repositories/medicines-repository.ts b/src/domain/pharma/application/repositories/medicines-repository.ts[m
[1mindex 1dc35ac..591f53a 100755[m
[1m--- a/src/domain/pharma/application/repositories/medicines-repository.ts[m
[1m+++ b/src/domain/pharma/application/repositories/medicines-repository.ts[m
[36m@@ -5,5 +5,5 @@[m [mexport abstract class MedicinesRepository {[m
   abstract create(medicine: Medicine): Promise<void>[m
   abstract medicineExists(medicine: Medicine): Promise<Medicine | null>[m
   abstract findById(id:string): Promise<Medicine | null>[m
[31m-  abstract findMany(params: PaginationParams, content?: string): Promise<Medicine[]>[m
[32m+[m[32m  abstract findMany(params: PaginationParams, content?: string): Promise<{ medicines: Medicine[], totalCount: number }>[m
 }[m
[1mdiff --git a/src/domain/pharma/application/use-cases/medicine/medicine-variant/fetch-medicines-variants.ts b/src/domain/pharma/application/use-cases/medicine/medicine-variant/fetch-medicines-variants.ts[m
[1mindex caab010..fa89297 100644[m
[1m--- a/src/domain/pharma/application/use-cases/medicine/medicine-variant/fetch-medicines-variants.ts[m
[1m+++ b/src/domain/pharma/application/use-cases/medicine/medicine-variant/fetch-medicines-variants.ts[m
[36m@@ -2,16 +2,19 @@[m [mimport { Either, right } from '@/core/either'[m
 import { Injectable } from '@nestjs/common'[m
 import { MedicineVariantWithMedicine } from '@/domain/pharma/enterprise/entities/value-objects/medicine-variant-with-medicine'[m
 import { MedicinesVariantsRepository } from '../../../repositories/medicine-variant-repository'[m
[32m+[m[32mimport { Meta } from '@/core/repositories/meta'[m
 [m
 interface FetchMedicinesVariantsUseCaseRequest {[m
   medicineId: string;[m
   page: number;[m
[32m+[m[32m  content?: string[m
 }[m
 [m
 type FetchMedicinesVariantsUseCaseResponse = Either<[m
   null,[m
   {[m
[31m-    medicinesVariants: MedicineVariantWithMedicine[];[m
[32m+[m[32m    medicinesVariants: MedicineVariantWithMedicine[],[m
[32m+[m[32m    meta: Meta[m
   }[m
 >[m
 [m
[36m@@ -22,17 +25,23 @@[m [mexport class FetchMedicinesVariantsUseCase {[m
   ) {}[m
 [m
   async execute({[m
[31m-    page,[m
     medicineId,[m
[32m+[m[32m    page,[m
[32m+[m[32m    content,[m
   }: FetchMedicinesVariantsUseCaseRequest): Promise<FetchMedicinesVariantsUseCaseResponse> {[m
[31m-    const medicinesVariants =[m
[32m+[m[32m    const { medicinesVariants, meta } =[m
       await this.MedicinesVariantsRepository.findManyByMedicineIdWithMedicine([m
         medicineId,[m
         { page },[m
[32m+[m[32m        content,[m
       )[m
 [m
     return right({[m
       medicinesVariants,[m
[32m+[m[32m      meta: {[m
[32m+[m[32m        page: meta.page,[m
[32m+[m[32m        totalCount: meta.totalCount,[m
[32m+[m[32m      },[m
     })[m
   }[m
 }[m
[1mdiff --git a/src/domain/pharma/application/use-cases/medicine/medicine/fetch-medicines.ts b/src/domain/pharma/application/use-cases/medicine/medicine/fetch-medicines.ts[m
[1mindex 31eca4f..f405553 100644[m
[1m--- a/src/domain/pharma/application/use-cases/medicine/medicine/fetch-medicines.ts[m
[1m+++ b/src/domain/pharma/application/use-cases/medicine/medicine/fetch-medicines.ts[m
[36m@@ -2,6 +2,7 @@[m [mimport { Either, right } from '@/core/either'[m
 import { Injectable } from '@nestjs/common'[m
 import { Medicine } from '@/domain/pharma/enterprise/entities/medicine'[m
 import { MedicinesRepository } from '../../../repositories/medicines-repository'[m
[32m+[m[32mimport type { Meta } from '@/core/repositories/meta'[m
 [m
 interface FetchMedicinesUseCaseRequest {[m
   page: number,[m
[36m@@ -11,7 +12,8 @@[m [minterface FetchMedicinesUseCaseRequest {[m
 type FetchMedicinesUseCaseResponse = Either<[m
   null,[m
   {[m
[31m-    medicines: Medicine[][m
[32m+[m[32m    medicines: Medicine[],[m
[32m+[m[32m    meta: Meta[m
   }[m
 >[m
 [m
[36m@@ -23,10 +25,14 @@[m [mexport class FetchMedicinesUseCase {[m
     page,[m
     content,[m
   }: FetchMedicinesUseCaseRequest): Promise<FetchMedicinesUseCaseResponse> {[m
[31m-    const medicines = await this.MedicinesRepository.findMany({ page }, content)[m
[32m+[m[32m    const { medicines, totalCount } = await this.MedicinesRepository.findMany({ page }, content)[m
 [m
     return right({[m
       medicines,[m
[32m+[m[32m      meta: {[m
[32m+[m[32m        totalCount,[m
[32m+[m[32m        page,[m
[32m+[m[32m      },[m
     })[m
   }[m
 }[m
[1mdiff --git a/src/infra/database/prisma/mappers/prisma-medicine-mapper.ts b/src/infra/database/prisma/mappers/prisma-medicine-mapper.ts[m
[1mindex 20ebb41..b14f964 100644[m
[1m--- a/src/infra/database/prisma/mappers/prisma-medicine-mapper.ts[m
[1m+++ b/src/infra/database/prisma/mappers/prisma-medicine-mapper.ts[m
[36m@@ -20,9 +20,6 @@[m [mexport class PrismaMedicineMapper {[m
       id: medicine.id.toString(),[m
       name: medicine.content,[m
       description: medicine.description,[m
[31m-      therapeuticClasses: {[m
[31m-        connect: medicine.therapeuticClassesIds.map(item => ({ id: item.toString() })),[m
[31m-      },[m
       medicineVariants: {[m
         connect: medicine.medicinesVariantsIds.map(item => ({ id: item.toString() })),[m
       },[m
[1mdiff --git a/src/infra/database/prisma/repositories/prisma-medicines-repository.ts b/src/infra/database/prisma/repositories/prisma-medicines-repository.ts[m
[1mindex e236b85..f290f11 100644[m
[1m--- a/src/infra/database/prisma/repositories/prisma-medicines-repository.ts[m
[1m+++ b/src/infra/database/prisma/repositories/prisma-medicines-repository.ts[m
[36m@@ -58,8 +58,8 @@[m [mexport class PrismaMedicinesRepository implements MedicinesRepository {[m
     return PrismaMedicineMapper.toDomain(medicine)[m
   }[m
 [m
[31m-  async findMany({ page }, content?: string): Promise<Medicine[]> {[m
[31m-    const manufacturers = await this.prisma.medicine.findMany({[m
[32m+[m[32m  async findMany({ page }, content?: string): Promise<{ medicines: Medicine[], totalCount: number }> {[m
[32m+[m[32m    const medicines = await this.prisma.medicine.findMany({[m
       orderBy: { createdAt: 'desc' },[m
       skip: (page - 1) * 20,[m
       take: 20,[m
[36m@@ -71,6 +71,18 @@[m [mexport class PrismaMedicinesRepository implements MedicinesRepository {[m
       },[m
     })[m
 [m
[31m-    return manufacturers.map(PrismaMedicineMapper.toDomain)[m
[32m+[m[32m    const totalCount = await this.prisma.medicine.count({[m
[32m+[m[32m      where: {[m
[32m+[m[32m        name: {[m
[32m+[m[32m          contains: content ?? '',[m
[32m+[m[32m          mode: 'insensitive',[m
[32m+[m[32m        },[m
[32m+[m[32m      },[m
[32m+[m[32m    })[m
[32m+[m[32m    const medicinesMappered = medicines.map(PrismaMedicineMapper.toDomain)[m
[32m+[m[32m    return {[m
[32m+[m[32m      medicines: medicinesMappered,[m
[32m+[m[32m      totalCount,[m
[32m+[m[32m    }[m
   }[m
 }[m
[1mdiff --git a/src/infra/database/prisma/repositories/prisma-medicines-variants-repository.ts b/src/infra/database/prisma/repositories/prisma-medicines-variants-repository.ts[m
[1mindex 7ddf22a..9cae7db 100644[m
[1m--- a/src/infra/database/prisma/repositories/prisma-medicines-variants-repository.ts[m
[1m+++ b/src/infra/database/prisma/repositories/prisma-medicines-variants-repository.ts[m
[36m@@ -6,6 +6,7 @@[m [mimport { PrismaMedicineVariantMapper } from '../mappers/prisma-medicine-variant-[m
 import { PaginationParams } from '@/core/repositories/pagination-params'[m
 import { MedicineVariantWithMedicine } from '@/domain/pharma/enterprise/entities/value-objects/medicine-variant-with-medicine'[m
 import { PrismaMedicineVariantWithMedicineMapper } from '../mappers/prisma-medicine-variant-with-medicine-mapper'[m
[32m+[m[32mimport type { Meta } from '@/core/repositories/meta'[m
 [m
 @Injectable()[m
 export class PrismaMedicinesVariantsRepository implements MedicinesVariantsRepository {[m
[36m@@ -50,11 +51,25 @@[m [mexport class PrismaMedicinesVariantsRepository implements MedicinesVariantsRepos[m
   async findManyByMedicineIdWithMedicine([m
     medicineId: string,[m
     { page }: PaginationParams,[m
[31m-  ): Promise<MedicineVariantWithMedicine[]> {[m
[31m-    const pageSize = 20 // Número de itens por página[m
[31m-[m
[32m+[m[32m    content?: string,[m
[32m+[m[32m  ):Promise<{[m
[32m+[m[32m    medicinesVariants: MedicineVariantWithMedicine[],[m
[32m+[m[32m    meta: Meta[m
[32m+[m[32m  }> {[m
[32m+[m[32m    const pageSize = 20[m
     const medicineVariants = await this.prisma.medicineVariant.findMany({[m
[31m-      where: { medicineId },[m
[32m+[m[32m      where: {[m
[32m+[m[32m        medicineId,[m
[32m+[m[32m        AND: {[m
[32m+[m[32m          medicine: {[m
[32m+[m[32m            name: {[m
[32m+[m[32m              contains: content ?? '',[m
[32m+[m[32m              mode: 'insensitive',[m
[32m+[m
[32m+[m[32m            },[m
[32m+[m[32m          },[m
[32m+[m[32m        },[m
[32m+[m[32m      },[m
       include: {[m
         medicine: true,[m
         pharmaceuticalForm: true,[m
[36m@@ -64,6 +79,28 @@[m [mexport class PrismaMedicinesVariantsRepository implements MedicinesVariantsRepos[m
       take: pageSize,[m
     })[m
 [m
[31m-    return medicineVariants.map(PrismaMedicineVariantWithMedicineMapper.toDomain)[m
[32m+[m[32m    const totalCount = await this.prisma.medicineVariant.count({[m
[32m+[m[32m      where: {[m
[32m+[m[32m        medicineId,[m
[32m+[m[32m        AND: {[m
[32m+[m[32m          medicine: {[m
[32m+[m[32m            name: {[m
[32m+[m[32m              contains: content ?? '',[m
[32m+[m[32m              mode: 'insensitive',[m
[32m+[m[32m            },[m
[32m+[m[32m          },[m
[32m+[m[32m        },[m
[32m+[m[32m      },[m
[32m+[m[32m    })[m
[32m+[m
[32m+[m[32m    const medicineVariantsMappered = medicineVariants.map(PrismaMedicineVariantWithMedicineMapper.toDomain)[m
[32m+[m
[32m+[m[32m    return {[m
[32m+[m[32m      medicinesVariants: medicineVariantsMappered,[m
[32m+[m[32m      meta: {[m
[32m+[m[32m        page,[m
[32m+[m[32m        totalCount,[m
[32m+[m[32m      },[m
[32m+[m[32m    }[m
   }[m
 }[m
[1mdiff --git a/src/infra/http/controllers/medicine/medicine-variant/fetch-medicine-variant.controller.ts b/src/infra/http/controllers/medicine/medicine-variant/fetch-medicine-variant.controller.ts[m
[1mindex ed3be67..9d02a67 100644[m
[1m--- a/src/infra/http/controllers/medicine/medicine-variant/fetch-medicine-variant.controller.ts[m
[1m+++ b/src/infra/http/controllers/medicine/medicine-variant/fetch-medicine-variant.controller.ts[m
[36m@@ -5,16 +5,16 @@[m [mimport { JwtAuthGuard } from '@/infra/auth/jwt-auth.guard'[m
 import { FetchMedicinesVariantsUseCase } from '@/domain/pharma/application/use-cases/medicine/medicine-variant/fetch-medicines-variants'[m
 import { MedicineVariantWithMedicinePresenter } from '@/infra/http/presenters/medicine-variant-with-medicine-presenter'[m
 [m
[31m-const pageQueryParamSchema = z[m
[31m-  .string()[m
[31m-  .optional()[m
[31m-  .default('1')[m
[31m-  .transform(Number)[m
[31m-  .pipe(z.number().min(1))[m
[31m-[m
[31m-const queryValidationPipe = new ZodValidationPipe(pageQueryParamSchema)[m
[31m-[m
[31m-type PageQueryParamSchema = z.infer<typeof pageQueryParamSchema>[m
[32m+[m[32mconst queryParamsSchema = z.object({[m
[32m+[m[32m  page: z[m
[32m+[m[32m    .string()[m
[32m+[m[32m    .optional()[m
[32m+[m[32m    .default('1')[m
[32m+[m[32m    .transform(Number)[m
[32m+[m[32m    .pipe(z.number().min(1)),[m
[32m+[m[32m  query: z.string().optional().default(''),[m
[32m+[m[32m})[m
[32m+[m[32mtype QueryParams = z.infer<typeof queryParamsSchema>[m
 [m
 @Controller('/medicines-variants')[m
 export class FetchMedicinesVariantsController {[m
[36m@@ -23,20 +23,26 @@[m [mexport class FetchMedicinesVariantsController {[m
   @Get()[m
   @UseGuards(JwtAuthGuard)[m
   async handle([m
[31m-    @Query('page', queryValidationPipe) page: PageQueryParamSchema,[m
[32m+[m[32m    @Query(new ZodValidationPipe(queryParamsSchema)) queryParams: QueryParams,[m
     @Query('medicineId') medicineId: string,[m
   ) {[m
[32m+[m[32m    const { page, query } = queryParams[m
     const result = await this.fetchMedicinesVariants.execute({[m
       page,[m
       medicineId,[m
[32m+[m[32m      content: query,[m
     })[m
 [m
     if (result.isLeft()) {[m
       throw new BadRequestException({})[m
     }[m
 [m
[31m-    const medicinevariants = result.value.medicinesVariants[m
[31m-[m
[31m-    return { medicines_variants: medicinevariants.map(MedicineVariantWithMedicinePresenter.toHTTP) }[m
[32m+[m[32m    const { medicinesVariants, meta } = result.value[m
[32m+[m[32m    const medicinesVariantsMappered =[m
[32m+[m[32m    medicinesVariants.map(MedicineVariantWithMedicinePresenter.toHTTP)[m
[32m+[m[32m    return {[m
[32m+[m[32m      medicines_variants: medicinesVariantsMappered,[m
[32m+[m[32m      meta,[m
[32m+[m[32m    }[m
   }[m
 }[m
[1mdiff --git a/src/infra/http/controllers/medicine/medicine/fetch-medicines.controller.ts b/src/infra/http/controllers/medicine/medicine/fetch-medicines.controller.ts[m
[1mindex df52b5d..199f1a3 100644[m
[1m--- a/src/infra/http/controllers/medicine/medicine/fetch-medicines.controller.ts[m
[1m+++ b/src/infra/http/controllers/medicine/medicine/fetch-medicines.controller.ts[m
[36m@@ -32,8 +32,14 @@[m [mexport class FetchMedicinesController {[m
       throw new BadRequestException({})[m
     }[m
 [m
[31m-    const medicines = result.value.medicines[m
[31m-[m
[31m-    return { medicines: medicines.map(MedicinePresenter.toHTTP) }[m
[32m+[m[32m    const { medicines, meta } = result.value[m
[32m+[m
[32m+[m[32m    return {[m
[32m+[m[32m      medicines: medicines.map(MedicinePresenter.toHTTP),[m
[32m+[m[32m      meta: {[m
[32m+[m[32m        totalCount: meta.totalCount,[m
[32m+[m[32m        page: meta.page,[m
[32m+[m[32m      },[m
[32m+[m[32m    }[m
   }[m
 }[m
[1mdiff --git a/src/infra/main.ts b/src/infra/main.ts[m
[1mindex 2e2bba7..32d6e73 100755[m
[1m--- a/src/infra/main.ts[m
[1m+++ b/src/infra/main.ts[m
[36m@@ -2,11 +2,23 @@[m [mimport { NestFactory } from '@nestjs/core'[m
 import { AppModule } from './app.module'[m
 import { ConfigService } from '@nestjs/config'[m
 import { Env } from './env'[m
[32m+[m[32mimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger'[m
 [m
 async function bootstrap() {[m
   const app = await NestFactory.create(AppModule, { cors: true })[m
   const configService = app.get<ConfigService<Env, true>>(ConfigService)[m
   const port = configService.get('PORT', { infer: true })[m
[32m+[m
[32m+[m[32m  const config = new DocumentBuilder()[m
[32m+[m[32m    .setTitle('Cats example')[m
[32m+[m[32m    .setDescription('The cats API description')[m
[32m+[m[32m    .setVersion('1.0')[m
[32m+[m[32m    .addTag('cats')[m
[32m+[m[32m    .build()[m
[32m+[m[32m  const documentFactory = () => SwaggerModule.createDocument(app, config)[m
[32m+[m[32m  SwaggerModule.setup('api', app, documentFactory)[m
[32m+[m
   await app.listen(port ?? 3333)[m
 }[m
[32m+[m
 bootstrap()[m
