generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OperatorRole {
  SUPER_ADMIN
  MANAGER
  COMMON
}

model Operator {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  passwordHash  String          @map("password_hash")
  institutions  Institution[]   @relation("OperatorInstitutions")
  role          OperatorRole    @default(COMMON)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @updatedAt @map("updated_at")
  MedicineEntry MedicineEntry[]

  @@map("operators")
}

model Stock {
  id            String          @id @default(uuid())
  name          String
  status        Boolean         @default(true)
  institutionId String          @map("institution_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @updatedAt @map("updated_at")
  Institution   Institution?    @relation(fields: [institutionId], references: [id])
  MedicineStock MedicineStock[]
  Batchestock   Batchestock[]

  @@map("stocks")
}

model Institution {
  id          String     @id @default(uuid())
  name        String
  cnpj        String     @unique
  description String?
  operators   Operator[] @relation("OperatorInstitutions")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime?  @updatedAt @map("updated_at")
  stocks      Stock[]

  @@map("institutions")
}

model PharmaceuticalForm {
  id              String            @id @default(uuid())
  name            String            @unique()
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  MedicineVariant MedicineVariant[]

  @@map("pharmaceutical_forms")
}

model Manufacturer {
  id          String    @id @default(uuid())
  name        String
  cnpj        String    @db.VarChar(14)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  Batch       Batch[]

  @@map("manufacturers")
}

model UnitMeasure {
  id              String            @id @default(uuid())
  acronym         String            @unique
  name            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  MedicineVariant MedicineVariant[]

  @@map("unit_measures")
}

model Pathology {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("pathology")
}

model TherapeuticClass {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) @map("created_at")

  MedicineTherapeuticClass MedicineTherapeuticClass[]

  @@map("therapeutic_classes")
}

model Medicine {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  medicineVariants         MedicineVariant[]
  MedicineTherapeuticClass MedicineTherapeuticClass[]

  @@index([name])
}

model MedicineVariant {
  id                   String    @id @default(uuid())
  medicineId           String    @map("medicine_id")
  dosage               String
  pharmaceuticalFormId String    @map("pharmaceutical_form_id")
  unitMeasureId        String    @map("unit_measure_id")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime? @updatedAt @map("updated_at")

  medicine           Medicine           @relation(fields: [medicineId], references: [id])
  pharmaceuticalForm PharmaceuticalForm @relation(fields: [pharmaceuticalFormId], references: [id])
  unitMeasure        UnitMeasure        @relation(fields: [unitMeasureId], references: [id])
  MedicineStock      MedicineStock[]
  Batchestock        Batchestock[]

  @@map("medicine_variants")
}

model MedicineTherapeuticClass {
  medicineId         String
  therapeuticClassId String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt

  medicine         Medicine         @relation(fields: [medicineId], references: [id])
  therapeuticClass TherapeuticClass @relation(fields: [therapeuticClassId], references: [id])

  @@id([medicineId, therapeuticClassId])
  @@map("medicine_therapeutic_class")
}

enum MovementDirection {
  ENTRY
  EXIT
}

model MovementType {
  id            String            @id @default(uuid())
  name          String            @unique
  direction     MovementDirection
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime?         @updatedAt @map("updated_at")
  MedicineEntry MedicineEntry[]
}

model MedicineEntry {
  id              String    @id @default(cuid())
  medicineStockId String
  batcheStockId   String
  quantity        Int
  operatorId      String
  movementTypeId  String
  entryDate       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  medicineStock MedicineStock @relation(fields: [medicineStockId], references: [id])
  batcheStock   Batchestock   @relation(fields: [batcheStockId], references: [id])
  movementType  MovementType  @relation(fields: [movementTypeId], references: [id])
  operator      Operator      @relation(fields: [operatorId], references: [id])

  @@index([medicineStockId])
  @@index([batcheStockId])
  @@index([movementTypeId])
}

model MedicineStock {
  id                String    @id @default(cuid())
  medicineVariantId String
  stockId           String
  currentQuantity   Int
  minimumLevel      Int       @default(0)
  batchesStockIds   String[]
  lastMove          DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  medicineVariant MedicineVariant @relation(fields: [medicineVariantId], references: [id])
  stock           Stock           @relation(fields: [stockId], references: [id])
  MedicineEntry   MedicineEntry[]

  @@index([medicineVariantId])
  @@index([stockId])
}

model Batchestock {
  id                String    @id @default(cuid())
  stockId           String
  batchId           String
  medicineVariantId String
  currentQuantity   Int
  lastMove          DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  stock           Stock           @relation(fields: [stockId], references: [id])
  batch           Batch           @relation(fields: [batchId], references: [id])
  medicineVariant MedicineVariant @relation(fields: [medicineVariantId], references: [id])
  MedicineEntry   MedicineEntry[]

  @@index([stockId])
  @@index([batchId])
  @@index([medicineVariantId])
}

model Batch {
  id                String    @id @default(cuid())
  manufacturerId    String
  code              String    @unique
  expirationDate    DateTime
  manufacturingDate DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt

  manufacturer Manufacturer  @relation(fields: [manufacturerId], references: [id])
  Batchestock  Batchestock[]

  @@index([manufacturerId])
}

model Address {
  id           String    @id @default(uuid())
  street       String
  number       String
  complement   String?   @db.VarChar(255)
  neighborhood String
  city         String
  state        String
  zipCode      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("addresses")
}

enum Gender {
  M
  F
  O
}

enum Race {
  BLACK
  WHITE
  YELLOW
  MIXED
  UNDECLARED
  INDIGENOUS
}

model Patient {
  id                  String    @id @default(uuid())
  name                String
  cpf                 String    @unique
  sus                 String    @unique
  birthDate           DateTime
  gender              Gender
  race                Race
  pathologiesIds      String[]
  generalRegistration String?   @db.VarChar(255)
  addressId           String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime? @updatedAt

  @@map("patients")
}
