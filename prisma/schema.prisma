generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OperatorRole {
  SUPER_ADMIN
  MANAGER
  COMMON
}

model Operator {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  passwordHash String       @map("password_hash")
  role         OperatorRole @default(COMMON)
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime?    @updatedAt @map("updated_at")

  medicineEntries MedicineEntry[]
  exits           Exit[]
  dispensations   Dispensation[]
  institutions    Institution[]   @relation("OperatorInstitutions")

  @@map("operators")
}

enum InstitutionType {
  PUBLIC
  PRIVATE
  ONG
}

model Institution {
  id           String          @id @default(uuid())
  name         String
  cnpj         String          @unique
  type         InstitutionType
  responsible  String
  controlStock Boolean         @map("control_stock")
  description  String?
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime?       @updatedAt @map("updated_at")

  stocks    Stock[]
  exits     Exit[]
  operators Operator[] @relation("OperatorInstitutions")

  @@map("institutions")
}

model Stock {
  id            String    @id @default(uuid())
  name          String
  status        Boolean   @default(true)
  institutionId String    @map("institution_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")

  medicinesStocks MedicineStock[]
  batchestocks    BatcheStock[]
  entries         MedicineEntry[]
  exits           Exit[]
  institution     Institution?    @relation(fields: [institutionId], references: [id])

  @@map("stocks")
}

model PharmaceuticalForm {
  id        String    @id @default(uuid())
  name      String    @unique()
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  medicinesVariants MedicineVariant[]

  @@map("pharmaceutical_forms")
}

model Manufacturer {
  id          String    @id @default(uuid())
  name        String
  cnpj        String    @db.VarChar(14)
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  batches Batch[]

  @@map("manufacturers")
}

model UnitMeasure {
  id        String    @id @default(uuid())
  acronym   String    @unique
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  medicinesVariants MedicineVariant[]

  @@map("unit_measures")
}

model Pathology {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  patients Patient[]

  @@map("pathology")
}

model TherapeuticClass {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  medicines Medicine[] @relation("ClassMedicines")

  @@map("therapeutic_classes")
}

model Medicine {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  medicineVariants   MedicineVariant[]
  therapeuticClasses TherapeuticClass[] @relation("ClassMedicines")

  @@index([name])
  @@map("medicines")
}

model MedicineVariant {
  id                   String    @id @default(uuid())
  medicineId           String    @map("medicine_id")
  dosage               String
  pharmaceuticalFormId String    @map("pharmaceutical_form_id")
  unitMeasureId        String    @map("unit_measure_id")
  complement           String?
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime? @updatedAt @map("updated_at")

  medicineStocks     MedicineStock[]
  batcheStocks       BatcheStock[]
  medicine           Medicine           @relation(fields: [medicineId], references: [id])
  pharmaceuticalForm PharmaceuticalForm @relation(fields: [pharmaceuticalFormId], references: [id])
  unitMeasure        UnitMeasure        @relation(fields: [unitMeasureId], references: [id])

  @@map("medicines_variants")
}

enum MovementDirection {
  ENTRY
  EXIT
}

model MovementType {
  id        String            @id @default(uuid())
  name      String            @unique
  direction MovementDirection
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime?         @updatedAt @map("updated_at")

  exits   Exit[]
  entries MedicineEntry[]
}

model MedicineStock {
  id                String    @id @default(cuid())
  medicineVariantId String    @map("medicine_variant_id")
  stockId           String    @map("stock_id")
  currentQuantity   Int       @map("current_quantity")
  minimumLevel      Int       @default(0) @map("minimum_level")
  lastMove          DateTime? @map("last_move")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  batchesStocks   BatcheStock[]
  medicineVariant MedicineVariant @relation(fields: [medicineVariantId], references: [id])
  stock           Stock           @relation(fields: [stockId], references: [id])
  UseMedicine     UseMedicine[]

  @@index([medicineVariantId])
  @@index([stockId])
  @@map("medicines_stocks")
}

model BatcheStock {
  id                String    @id @default(cuid())
  stockId           String    @map("stock_id")
  batchId           String    @map("batch_id")
  medicineVariantId String    @map("medicine_variant_id")
  medicineStockId   String    @map("medicine_stock_id")
  currentQuantity   Int       @map("current_quantity")
  lastMove          DateTime? @map("last_move")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  movimentation   Movimentation[]
  stock           Stock           @relation(fields: [stockId], references: [id])
  batch           Batch           @relation(fields: [batchId], references: [id])
  medicineVariant MedicineVariant @relation(fields: [medicineVariantId], references: [id])
  medicineStock   MedicineStock?  @relation(fields: [medicineStockId], references: [id])

  @@index([stockId])
  @@index([batchId])
  @@index([medicineVariantId])
  @@map("batches_stocks")
}

model Batch {
  id                String    @id @default(cuid())
  manufacturerId    String    @map("manufacturer_id")
  code              String
  expirationDate    DateTime  @map("expiration_date")
  manufacturingDate DateTime? @map("manufacturing_date")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime? @updatedAt @map("updated_at")

  batchesStocks BatcheStock[]
  manufacturer  Manufacturer  @relation(fields: [manufacturerId], references: [id])

  @@unique([manufacturerId, code])
  @@index([manufacturerId])
  @@map("batches")
}

model Address {
  id           String    @id @default(uuid())
  street       String?
  number       String?
  complement   String?   @db.VarChar(255)
  neighborhood String
  city         String
  state        String
  zipCode      String?   @map("zip_code")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")

  patient Patient?

  @@map("addresses")
}

enum Gender {
  M
  F
  O
}

enum Race {
  BLACK
  WHITE
  YELLOW
  MIXED
  UNDECLARED
  INDIGENOUS
}

model Patient {
  id                  String    @id @default(uuid())
  name                String
  cpf                 String?   @unique
  sus                 String    @unique
  birthDate           DateTime  @map("birth_date")
  gender              Gender
  race                Race
  generalRegistration String?   @map("general_registration") @db.VarChar(255)
  addressId           String?   @unique @map("adress_id")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime? @updatedAt @map("updated_at")

  address       Address?       @relation(fields: [addressId], references: [id])
  pathologies   Pathology[]
  dispensations Dispensation[]

  @@map("patients")
}

model Dispensation {
  id               String    @id @default(uuid())
  patientId        String    @map("patient_id")
  dispensationDate DateTime  @map("dispensation_date")
  operatorId       String    @map("operator_id")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime? @updatedAt() @map("updated_at")

  patient  Patient  @relation(fields: [patientId], references: [id])
  operator Operator @relation(fields: [operatorId], references: [id])
  exit     Exit?

  @@map("dispensations")
}

model Movimentation {
  id           String            @id @default(uuid())
  direction    MovementDirection
  batchStockId String            @map("batch_stock_id")
  quantity     Int
  exitId       String?           @map("exit_id")
  entryId      String?           @map("entry_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime?         @updatedAt @map("updated_at")

  entry MedicineEntry? @relation(fields: [entryId], references: [id])
  exit  Exit?          @relation(fields: [exitId], references: [id])

  batchStock BatcheStock @relation(fields: [batchStockId], references: [id])

  @@map("movimentation")
}

enum EntryType {
  TRANSFER
  MOVEMENT_TYPE
}

model MedicineEntry {
  id             String    @id @default(uuid())
  operatorId     String    @map("operator_id")
  entryDate      DateTime  @default(now()) @map("entry_date")
  stockId        String    @map("stock_id")
  movementTypeId String?   @map("movement_type_id")
  nfNumber       String?   @map("nf_number")
  transferId     String?   @unique @map("transfer_id")
  entryType      EntryType @map("entry_type")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime? @updatedAt @map("updated_at")

  transfer      Transfer?       @relation(fields: [transferId], references: [id])
  operator      Operator        @relation(fields: [operatorId], references: [id])
  stock         Stock           @relation(fields: [stockId], references: [id])
  movementType  MovementType?   @relation(fields: [movementTypeId], references: [id])
  movimentation Movimentation[]

  @@map("medicines_entries")
}

enum ExitType {
  DISPENSATION
  MOVEMENT_TYPE
  EXPIRATION
  DONATION
  TRANSFER
}

model Exit {
  id                       String    @id @default(uuid())
  operatorId               String    @map("operator_id")
  exitType                 ExitType  @map("exit_type")
  stockId                  String    @map("stock_id")
  destinationInstitutionId String?   @map("destination_institution_id")
  dispensationId           String?   @unique @map("dispensation_id")
  transferId               String?   @unique @map("transfer_id")
  movementTypeId           String?   @map("movement_type_id")
  exitDate                 DateTime  @default(now()) @map("exit_date")
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime? @updatedAt @map("updated_at")

  movementType           MovementType?   @relation(fields: [movementTypeId], references: [id])
  transfer               Transfer?       @relation(fields: [transferId], references: [id])
  dispensation           Dispensation?   @relation(fields: [dispensationId], references: [id])
  destinationInstitution Institution?    @relation(fields: [destinationInstitutionId], references: [id])
  operator               Operator        @relation(fields: [operatorId], references: [id])
  stock                  Stock           @relation(fields: [stockId], references: [id])
  movimentation          Movimentation[]

  @@map("exits")
}

enum TransferStatus {
  PENDING
  CONFIRMED
  CANCELED
}

model Transfer {
  id                 String         @id @default(uuid())
  stockDestinationId String         @map("stock_destination_id")
  status             TransferStatus
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime?      @updatedAt @map("updated_at")
  confirmedAt        DateTime?      @map("confirmed_at")
  exit               Exit?
  entry              MedicineEntry?

  @@map("transfers")
}

model UseMedicine {
  id              String         @id @default(uuid())
  year            Int
  month           Int
  previousBalance Int            @map("previous_balance")
  medicineStockId String         @map("medicine_stock_id")
  currentBalance  Int            @map("current_balance")
  used            Int
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime?      @updatedAt @map("updated_at")
  medicineStock   MedicineStock? @relation(fields: [medicineStockId], references: [id])

  @@unique([year, month, medicineStockId])
  @@map("use_medicine")
}
